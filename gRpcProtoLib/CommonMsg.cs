// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CommonMsg.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from CommonMsg.proto</summary>
public static partial class CommonMsgReflection {

  #region Descriptor
  /// <summary>File descriptor for CommonMsg.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CommonMsgReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg9Db21tb25Nc2cucHJvdG8iBwoFRW1wdHkiHQoHU2V0RmxhZxISCgplcnJv",
          "cl9mbGFnGAEgASgRIi0KClBvc2l0aW9uM0QSCQoBeBgBIAEoARIJCgF5GAIg",
          "ASgBEgkKAXoYAyABKAEiIgoKUG9zaXRpb24yRBIJCgF4GAEgASgBEgkKAXkY",
          "AiABKAEiLQoGUG9zZTJEEgkKAXgYASABKAESCQoBeRgCIAEoARINCgV0aGV0",
          "YRgDIAEoASI5CgtPcmllbnRhdGlvbhIJCgF4GAEgASgBEgkKAXkYAiABKAES",
          "CQoBehgDIAEoARIJCgF3GAQgASgBIiAKCUpvaW50Q29uZhITCgtqb2ludF92",
          "YWx1ZRgBIAMoASIcCgdFeHRBeGlzEhEKCWV4dF92YWx1ZRgBIAMoASJqCgZQ",
          "b3NlM0QSHQoIcG9zaXRpb24YASABKAsyCy5Qb3NpdGlvbjNEEiEKC29yaWVu",
          "dGF0aW9uGAIgASgLMgwuT3JpZW50YXRpb24SHgoKam9pbnRfY29uZhgDIAEo",
          "CzIKLkpvaW50Q29uZiJXCg9DYW1lcmFQYXJhbWV0ZXISHgoNc2Vuc29yX29y",
          "aWdpbhgBIAEoCzIHLlBvc2UzRBIRCglpbnRyaW5zaWMYAiADKAESEQoJZXh0",
          "cmluc2ljGAMgAygBIk8KClBvaW50Q2xvdWQSDQoFc3RhbXAYASABKAESHgoN",
          "c2Vuc29yX29yaWdpbhgCIAEoCzIHLlBvc2UzRBISCgpwb2ludGNsb3VkGAMg",
          "ASgMYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Empty), global::Empty.Parser, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetFlag), global::SetFlag.Parser, new[]{ "ErrorFlag" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Position3D), global::Position3D.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Position2D), global::Position2D.Parser, new[]{ "X", "Y" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Pose2D), global::Pose2D.Parser, new[]{ "X", "Y", "Theta" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Orientation), global::Orientation.Parser, new[]{ "X", "Y", "Z", "W" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::JointConf), global::JointConf.Parser, new[]{ "JointValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ExtAxis), global::ExtAxis.Parser, new[]{ "ExtValue" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Pose3D), global::Pose3D.Parser, new[]{ "Position", "Orientation", "JointConf" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CameraParameter), global::CameraParameter.Parser, new[]{ "SensorOrigin", "Intrinsic", "Extrinsic" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PointCloud), global::PointCloud.Parser, new[]{ "Stamp", "SensorOrigin", "Pointcloud" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Empty : pb::IMessage<Empty> {
  private static readonly pb::MessageParser<Empty> _parser = new pb::MessageParser<Empty>(() => new Empty());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Empty> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty(Empty other) : this() {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Empty Clone() {
    return new Empty(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Empty);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Empty other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Empty other) {
    if (other == null) {
      return;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
      }
    }
  }

}

/// <summary>
/// 0 means no error, concrete errno will be add soon
/// </summary>
public sealed partial class SetFlag : pb::IMessage<SetFlag> {
  private static readonly pb::MessageParser<SetFlag> _parser = new pb::MessageParser<SetFlag>(() => new SetFlag());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetFlag> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetFlag() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetFlag(SetFlag other) : this() {
    errorFlag_ = other.errorFlag_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetFlag Clone() {
    return new SetFlag(this);
  }

  /// <summary>Field number for the "error_flag" field.</summary>
  public const int ErrorFlagFieldNumber = 1;
  private int errorFlag_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ErrorFlag {
    get { return errorFlag_; }
    set {
      errorFlag_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetFlag);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetFlag other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ErrorFlag != other.ErrorFlag) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ErrorFlag != 0) hash ^= ErrorFlag.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ErrorFlag != 0) {
      output.WriteRawTag(8);
      output.WriteSInt32(ErrorFlag);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ErrorFlag != 0) {
      size += 1 + pb::CodedOutputStream.ComputeSInt32Size(ErrorFlag);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetFlag other) {
    if (other == null) {
      return;
    }
    if (other.ErrorFlag != 0) {
      ErrorFlag = other.ErrorFlag;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ErrorFlag = input.ReadSInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Position3D : pb::IMessage<Position3D> {
  private static readonly pb::MessageParser<Position3D> _parser = new pb::MessageParser<Position3D>(() => new Position3D());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Position3D> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position3D() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position3D(Position3D other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position3D Clone() {
    return new Position3D(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Position3D);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Position3D other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    if (Z != 0D) hash ^= Z.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (Z != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    if (Z != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Position3D other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
    if (other.Z != 0D) {
      Z = other.Z;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Position2D : pb::IMessage<Position2D> {
  private static readonly pb::MessageParser<Position2D> _parser = new pb::MessageParser<Position2D>(() => new Position2D());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Position2D> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position2D() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position2D(Position2D other) : this() {
    x_ = other.x_;
    y_ = other.y_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Position2D Clone() {
    return new Position2D(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Position2D);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Position2D other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Position2D other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Pose2D : pb::IMessage<Pose2D> {
  private static readonly pb::MessageParser<Pose2D> _parser = new pb::MessageParser<Pose2D>(() => new Pose2D());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Pose2D> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pose2D() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pose2D(Pose2D other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    theta_ = other.theta_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pose2D Clone() {
    return new Pose2D(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "theta" field.</summary>
  public const int ThetaFieldNumber = 3;
  private double theta_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Theta {
    get { return theta_; }
    set {
      theta_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Pose2D);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Pose2D other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Theta != other.Theta) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    if (Theta != 0D) hash ^= Theta.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (Theta != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Theta);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    if (Theta != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Pose2D other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
    if (other.Theta != 0D) {
      Theta = other.Theta;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Theta = input.ReadDouble();
          break;
        }
      }
    }
  }

}

public sealed partial class Orientation : pb::IMessage<Orientation> {
  private static readonly pb::MessageParser<Orientation> _parser = new pb::MessageParser<Orientation>(() => new Orientation());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Orientation> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation(Orientation other) : this() {
    x_ = other.x_;
    y_ = other.y_;
    z_ = other.z_;
    w_ = other.w_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Orientation Clone() {
    return new Orientation(this);
  }

  /// <summary>Field number for the "x" field.</summary>
  public const int XFieldNumber = 1;
  private double x_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double X {
    get { return x_; }
    set {
      x_ = value;
    }
  }

  /// <summary>Field number for the "y" field.</summary>
  public const int YFieldNumber = 2;
  private double y_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Y {
    get { return y_; }
    set {
      y_ = value;
    }
  }

  /// <summary>Field number for the "z" field.</summary>
  public const int ZFieldNumber = 3;
  private double z_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Z {
    get { return z_; }
    set {
      z_ = value;
    }
  }

  /// <summary>Field number for the "w" field.</summary>
  public const int WFieldNumber = 4;
  private double w_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double W {
    get { return w_; }
    set {
      w_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Orientation);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Orientation other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (X != other.X) return false;
    if (Y != other.Y) return false;
    if (Z != other.Z) return false;
    if (W != other.W) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (X != 0D) hash ^= X.GetHashCode();
    if (Y != 0D) hash ^= Y.GetHashCode();
    if (Z != 0D) hash ^= Z.GetHashCode();
    if (W != 0D) hash ^= W.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (X != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(X);
    }
    if (Y != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Y);
    }
    if (Z != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(Z);
    }
    if (W != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(W);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (X != 0D) {
      size += 1 + 8;
    }
    if (Y != 0D) {
      size += 1 + 8;
    }
    if (Z != 0D) {
      size += 1 + 8;
    }
    if (W != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Orientation other) {
    if (other == null) {
      return;
    }
    if (other.X != 0D) {
      X = other.X;
    }
    if (other.Y != 0D) {
      Y = other.Y;
    }
    if (other.Z != 0D) {
      Z = other.Z;
    }
    if (other.W != 0D) {
      W = other.W;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          X = input.ReadDouble();
          break;
        }
        case 17: {
          Y = input.ReadDouble();
          break;
        }
        case 25: {
          Z = input.ReadDouble();
          break;
        }
        case 33: {
          W = input.ReadDouble();
          break;
        }
      }
    }
  }
}

public sealed partial class JointConf : pb::IMessage<JointConf> {
  private static readonly pb::MessageParser<JointConf> _parser = new pb::MessageParser<JointConf>(() => new JointConf());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<JointConf> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JointConf() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JointConf(JointConf other) : this() {
    jointValue_ = other.jointValue_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public JointConf Clone() {
    return new JointConf(this);
  }

  /// <summary>Field number for the "joint_value" field.</summary>
  public const int JointValueFieldNumber = 1;
  private static readonly pb::FieldCodec<double> _repeated_jointValue_codec
      = pb::FieldCodec.ForDouble(10);
  private readonly pbc::RepeatedField<double> jointValue_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> JointValue {
    get { return jointValue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as JointConf);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(JointConf other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!jointValue_.Equals(other.jointValue_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= jointValue_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    jointValue_.WriteTo(output, _repeated_jointValue_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += jointValue_.CalculateSize(_repeated_jointValue_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(JointConf other) {
    if (other == null) {
      return;
    }
    jointValue_.Add(other.jointValue_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 9: {
          jointValue_.AddEntriesFrom(input, _repeated_jointValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class ExtAxis : pb::IMessage<ExtAxis> {
  private static readonly pb::MessageParser<ExtAxis> _parser = new pb::MessageParser<ExtAxis>(() => new ExtAxis());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ExtAxis> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtAxis() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtAxis(ExtAxis other) : this() {
    extValue_ = other.extValue_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ExtAxis Clone() {
    return new ExtAxis(this);
  }

  /// <summary>Field number for the "ext_value" field.</summary>
  public const int ExtValueFieldNumber = 1;
  private static readonly pb::FieldCodec<double> _repeated_extValue_codec
      = pb::FieldCodec.ForDouble(10);
  private readonly pbc::RepeatedField<double> extValue_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> ExtValue {
    get { return extValue_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ExtAxis);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ExtAxis other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!extValue_.Equals(other.extValue_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= extValue_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    extValue_.WriteTo(output, _repeated_extValue_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += extValue_.CalculateSize(_repeated_extValue_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ExtAxis other) {
    if (other == null) {
      return;
    }
    extValue_.Add(other.extValue_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 9: {
          extValue_.AddEntriesFrom(input, _repeated_extValue_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class Pose3D : pb::IMessage<Pose3D> {
  private static readonly pb::MessageParser<Pose3D> _parser = new pb::MessageParser<Pose3D>(() => new Pose3D());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Pose3D> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pose3D() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pose3D(Pose3D other) : this() {
    Position = other.position_ != null ? other.Position.Clone() : null;
    Orientation = other.orientation_ != null ? other.Orientation.Clone() : null;
    JointConf = other.jointConf_ != null ? other.JointConf.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Pose3D Clone() {
    return new Pose3D(this);
  }

  /// <summary>Field number for the "position" field.</summary>
  public const int PositionFieldNumber = 1;
  private global::Position3D position_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Position3D Position {
    get { return position_; }
    set {
      position_ = value;
    }
  }

  /// <summary>Field number for the "orientation" field.</summary>
  public const int OrientationFieldNumber = 2;
  private global::Orientation orientation_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Orientation Orientation {
    get { return orientation_; }
    set {
      orientation_ = value;
    }
  }

  /// <summary>Field number for the "joint_conf" field.</summary>
  public const int JointConfFieldNumber = 3;
  private global::JointConf jointConf_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::JointConf JointConf {
    get { return jointConf_; }
    set {
      jointConf_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Pose3D);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Pose3D other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Position, other.Position)) return false;
    if (!object.Equals(Orientation, other.Orientation)) return false;
    if (!object.Equals(JointConf, other.JointConf)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (position_ != null) hash ^= Position.GetHashCode();
    if (orientation_ != null) hash ^= Orientation.GetHashCode();
    if (jointConf_ != null) hash ^= JointConf.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (position_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Position);
    }
    if (orientation_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Orientation);
    }
    if (jointConf_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(JointConf);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (position_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
    }
    if (orientation_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Orientation);
    }
    if (jointConf_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(JointConf);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Pose3D other) {
    if (other == null) {
      return;
    }
    if (other.position_ != null) {
      if (position_ == null) {
        position_ = new global::Position3D();
      }
      Position.MergeFrom(other.Position);
    }
    if (other.orientation_ != null) {
      if (orientation_ == null) {
        orientation_ = new global::Orientation();
      }
      Orientation.MergeFrom(other.Orientation);
    }
    if (other.jointConf_ != null) {
      if (jointConf_ == null) {
        jointConf_ = new global::JointConf();
      }
      JointConf.MergeFrom(other.JointConf);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (position_ == null) {
            position_ = new global::Position3D();
          }
          input.ReadMessage(position_);
          break;
        }
        case 18: {
          if (orientation_ == null) {
            orientation_ = new global::Orientation();
          }
          input.ReadMessage(orientation_);
          break;
        }
        case 26: {
          if (jointConf_ == null) {
            jointConf_ = new global::JointConf();
          }
          input.ReadMessage(jointConf_);
          break;
        }
      }
    }
  }

}

public sealed partial class CameraParameter : pb::IMessage<CameraParameter> {
  private static readonly pb::MessageParser<CameraParameter> _parser = new pb::MessageParser<CameraParameter>(() => new CameraParameter());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CameraParameter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraParameter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraParameter(CameraParameter other) : this() {
    SensorOrigin = other.sensorOrigin_ != null ? other.SensorOrigin.Clone() : null;
    intrinsic_ = other.intrinsic_.Clone();
    extrinsic_ = other.extrinsic_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CameraParameter Clone() {
    return new CameraParameter(this);
  }

  /// <summary>Field number for the "sensor_origin" field.</summary>
  public const int SensorOriginFieldNumber = 1;
  private global::Pose3D sensorOrigin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Pose3D SensorOrigin {
    get { return sensorOrigin_; }
    set {
      sensorOrigin_ = value;
    }
  }

  /// <summary>Field number for the "intrinsic" field.</summary>
  public const int IntrinsicFieldNumber = 2;
  private static readonly pb::FieldCodec<double> _repeated_intrinsic_codec
      = pb::FieldCodec.ForDouble(18);
  private readonly pbc::RepeatedField<double> intrinsic_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> Intrinsic {
    get { return intrinsic_; }
  }

  /// <summary>Field number for the "extrinsic" field.</summary>
  public const int ExtrinsicFieldNumber = 3;
  private static readonly pb::FieldCodec<double> _repeated_extrinsic_codec
      = pb::FieldCodec.ForDouble(26);
  private readonly pbc::RepeatedField<double> extrinsic_ = new pbc::RepeatedField<double>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<double> Extrinsic {
    get { return extrinsic_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CameraParameter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CameraParameter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SensorOrigin, other.SensorOrigin)) return false;
    if(!intrinsic_.Equals(other.intrinsic_)) return false;
    if(!extrinsic_.Equals(other.extrinsic_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (sensorOrigin_ != null) hash ^= SensorOrigin.GetHashCode();
    hash ^= intrinsic_.GetHashCode();
    hash ^= extrinsic_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (sensorOrigin_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SensorOrigin);
    }
    intrinsic_.WriteTo(output, _repeated_intrinsic_codec);
    extrinsic_.WriteTo(output, _repeated_extrinsic_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (sensorOrigin_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorOrigin);
    }
    size += intrinsic_.CalculateSize(_repeated_intrinsic_codec);
    size += extrinsic_.CalculateSize(_repeated_extrinsic_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CameraParameter other) {
    if (other == null) {
      return;
    }
    if (other.sensorOrigin_ != null) {
      if (sensorOrigin_ == null) {
        sensorOrigin_ = new global::Pose3D();
      }
      SensorOrigin.MergeFrom(other.SensorOrigin);
    }
    intrinsic_.Add(other.intrinsic_);
    extrinsic_.Add(other.extrinsic_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          if (sensorOrigin_ == null) {
            sensorOrigin_ = new global::Pose3D();
          }
          input.ReadMessage(sensorOrigin_);
          break;
        }
        case 18:
        case 17: {
          intrinsic_.AddEntriesFrom(input, _repeated_intrinsic_codec);
          break;
        }
        case 26:
        case 25: {
          extrinsic_.AddEntriesFrom(input, _repeated_extrinsic_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class PointCloud : pb::IMessage<PointCloud> {
  private static readonly pb::MessageParser<PointCloud> _parser = new pb::MessageParser<PointCloud>(() => new PointCloud());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PointCloud> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMsgReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PointCloud() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PointCloud(PointCloud other) : this() {
    stamp_ = other.stamp_;
    SensorOrigin = other.sensorOrigin_ != null ? other.SensorOrigin.Clone() : null;
    pointcloud_ = other.pointcloud_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PointCloud Clone() {
    return new PointCloud(this);
  }

  /// <summary>Field number for the "stamp" field.</summary>
  public const int StampFieldNumber = 1;
  private double stamp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Stamp {
    get { return stamp_; }
    set {
      stamp_ = value;
    }
  }

  /// <summary>Field number for the "sensor_origin" field.</summary>
  public const int SensorOriginFieldNumber = 2;
  private global::Pose3D sensorOrigin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Pose3D SensorOrigin {
    get { return sensorOrigin_; }
    set {
      sensorOrigin_ = value;
    }
  }

  /// <summary>Field number for the "pointcloud" field.</summary>
  public const int PointcloudFieldNumber = 3;
  private pb::ByteString pointcloud_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Pointcloud {
    get { return pointcloud_; }
    set {
      pointcloud_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PointCloud);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PointCloud other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Stamp != other.Stamp) return false;
    if (!object.Equals(SensorOrigin, other.SensorOrigin)) return false;
    if (Pointcloud != other.Pointcloud) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Stamp != 0D) hash ^= Stamp.GetHashCode();
    if (sensorOrigin_ != null) hash ^= SensorOrigin.GetHashCode();
    if (Pointcloud.Length != 0) hash ^= Pointcloud.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Stamp != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Stamp);
    }
    if (sensorOrigin_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SensorOrigin);
    }
    if (Pointcloud.Length != 0) {
      output.WriteRawTag(26);
      output.WriteBytes(Pointcloud);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Stamp != 0D) {
      size += 1 + 8;
    }
    if (sensorOrigin_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorOrigin);
    }
    if (Pointcloud.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Pointcloud);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PointCloud other) {
    if (other == null) {
      return;
    }
    if (other.Stamp != 0D) {
      Stamp = other.Stamp;
    }
    if (other.sensorOrigin_ != null) {
      if (sensorOrigin_ == null) {
        sensorOrigin_ = new global::Pose3D();
      }
      SensorOrigin.MergeFrom(other.SensorOrigin);
    }
    if (other.Pointcloud.Length != 0) {
      Pointcloud = other.Pointcloud;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          Stamp = input.ReadDouble();
          break;
        }
        case 18: {
          if (sensorOrigin_ == null) {
            sensorOrigin_ = new global::Pose3D();
          }
          input.ReadMessage(sensorOrigin_);
          break;
        }
        case 26: {
          Pointcloud = input.ReadBytes();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
