// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Vision2d.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace App2D {

  /// <summary>Holder for reflection information generated from Vision2d.proto</summary>
  public static partial class Vision2DReflection {

    #region Descriptor
    /// <summary>File descriptor for Vision2d.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Vision2DReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5WaXNpb24yZC5wcm90bxIFQXBwMkQaD0NvbW1vbk1zZy5wcm90byIpCgpU",
            "cmlnZ2VyUmVxEhsKCnJvYm90X3Bvc2UYASABKAsyBy5Qb3NlM0QiDAoKV29y",
            "a09ialJlcSIlCgpXb3JrT2JqUmVwEhcKD2N1cnJlbnRfb2JqX251bRgBIAEo",
            "ESJBCgtMb2NhbGl6ZVJlcRITCgt2aXNpb25fbW9kZRgBIAEoERIPCgd0YXNr",
            "X2lkGAIgASgREgwKBGZsYWcYAyABKAgiVAoLTG9jYWxpemVSZXASFQoNdmlz",
            "aW9uX3N0YXR1cxgBIAEoERIVCg1vZmZzZXRfbWV0aG9kGAIgASgJEhcKBnBv",
            "c2UyZBgDIAEoCzIHLlBvc2UyRCJTCghDYWxpYlJlcRIVCg1vZmZzZXRfbWV0",
            "aG9kGAEgASgJEh0KCHBvc2l0aW9uGAIgASgLMgsuUG9zaXRpb24zRBIRCgl0",
            "ZXJtaW5hdGUYAyABKAgiPQoJQ29uZmlnUmVxEhsKCnJvYm90X3Bvc2UYASAB",
            "KAsyBy5Qb3NlM0QSEwoLdGVtcGxhdGVfbm8YAiABKBEyjwIKClJvYm90MmRB",
            "cHASLgoNdHJpZ2dlckNhbWVyYRIRLkFwcDJELlRyaWdnZXJSZXEaCC5TZXRG",
            "bGFnIgASPQoRZ2V0TG9jYWxpemVSZXN1bHQSEi5BcHAyRC5Mb2NhbGl6ZVJl",
            "cRoSLkFwcDJELkxvY2FsaXplUmVwIgASKgoLZG9DYWxpYnJhdGUSDy5BcHAy",
            "RC5DYWxpYlJlcRoILlNldEZsYWciABIsCgxjb25maWdTeXN0ZW0SEC5BcHAy",
            "RC5Db25maWdSZXEaCC5TZXRGbGFnIgASOAoOZ2V0V29ya09iakluZm8SES5B",
            "cHAyRC5Xb3JrT2JqUmVxGhEuQXBwMkQuV29ya09ialJlcCIAYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::CommonMsgReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.TriggerReq), global::App2D.TriggerReq.Parser, new[]{ "RobotPose" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.WorkObjReq), global::App2D.WorkObjReq.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.WorkObjRep), global::App2D.WorkObjRep.Parser, new[]{ "CurrentObjNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.LocalizeReq), global::App2D.LocalizeReq.Parser, new[]{ "VisionMode", "TaskId", "Flag" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.LocalizeRep), global::App2D.LocalizeRep.Parser, new[]{ "VisionStatus", "OffsetMethod", "Pose2D" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.CalibReq), global::App2D.CalibReq.Parser, new[]{ "OffsetMethod", "Position", "Terminate" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::App2D.ConfigReq), global::App2D.ConfigReq.Parser, new[]{ "RobotPose", "TemplateNo" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TriggerReq : pb::IMessage<TriggerReq> {
    private static readonly pb::MessageParser<TriggerReq> _parser = new pb::MessageParser<TriggerReq>(() => new TriggerReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TriggerReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerReq(TriggerReq other) : this() {
      RobotPose = other.robotPose_ != null ? other.RobotPose.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TriggerReq Clone() {
      return new TriggerReq(this);
    }

    /// <summary>Field number for the "robot_pose" field.</summary>
    public const int RobotPoseFieldNumber = 1;
    private global::Pose3D robotPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose3D RobotPose {
      get { return robotPose_; }
      set {
        robotPose_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TriggerReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TriggerReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RobotPose, other.RobotPose)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (robotPose_ != null) hash ^= RobotPose.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (robotPose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RobotPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (robotPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotPose);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TriggerReq other) {
      if (other == null) {
        return;
      }
      if (other.robotPose_ != null) {
        if (robotPose_ == null) {
          robotPose_ = new global::Pose3D();
        }
        RobotPose.MergeFrom(other.RobotPose);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (robotPose_ == null) {
              robotPose_ = new global::Pose3D();
            }
            input.ReadMessage(robotPose_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class WorkObjReq : pb::IMessage<WorkObjReq> {
    private static readonly pb::MessageParser<WorkObjReq> _parser = new pb::MessageParser<WorkObjReq>(() => new WorkObjReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkObjReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkObjReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkObjReq(WorkObjReq other) : this() {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkObjReq Clone() {
      return new WorkObjReq(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkObjReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkObjReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkObjReq other) {
      if (other == null) {
        return;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  public sealed partial class WorkObjRep : pb::IMessage<WorkObjRep> {
    private static readonly pb::MessageParser<WorkObjRep> _parser = new pb::MessageParser<WorkObjRep>(() => new WorkObjRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WorkObjRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkObjRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkObjRep(WorkObjRep other) : this() {
      currentObjNum_ = other.currentObjNum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WorkObjRep Clone() {
      return new WorkObjRep(this);
    }

    /// <summary>Field number for the "current_obj_num" field.</summary>
    public const int CurrentObjNumFieldNumber = 1;
    private int currentObjNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentObjNum {
      get { return currentObjNum_; }
      set {
        currentObjNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WorkObjRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WorkObjRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentObjNum != other.CurrentObjNum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentObjNum != 0) hash ^= CurrentObjNum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentObjNum != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(CurrentObjNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentObjNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(CurrentObjNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WorkObjRep other) {
      if (other == null) {
        return;
      }
      if (other.CurrentObjNum != 0) {
        CurrentObjNum = other.CurrentObjNum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CurrentObjNum = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalizeReq : pb::IMessage<LocalizeReq> {
    private static readonly pb::MessageParser<LocalizeReq> _parser = new pb::MessageParser<LocalizeReq>(() => new LocalizeReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalizeReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizeReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizeReq(LocalizeReq other) : this() {
      visionMode_ = other.visionMode_;
      taskId_ = other.taskId_;
      flag_ = other.flag_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizeReq Clone() {
      return new LocalizeReq(this);
    }

    /// <summary>Field number for the "vision_mode" field.</summary>
    public const int VisionModeFieldNumber = 1;
    private int visionMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VisionMode {
      get { return visionMode_; }
      set {
        visionMode_ = value;
      }
    }

    /// <summary>Field number for the "task_id" field.</summary>
    public const int TaskIdFieldNumber = 2;
    private int taskId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TaskId {
      get { return taskId_; }
      set {
        taskId_ = value;
      }
    }

    /// <summary>Field number for the "flag" field.</summary>
    public const int FlagFieldNumber = 3;
    private bool flag_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Flag {
      get { return flag_; }
      set {
        flag_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalizeReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalizeReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisionMode != other.VisionMode) return false;
      if (TaskId != other.TaskId) return false;
      if (Flag != other.Flag) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisionMode != 0) hash ^= VisionMode.GetHashCode();
      if (TaskId != 0) hash ^= TaskId.GetHashCode();
      if (Flag != false) hash ^= Flag.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisionMode != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(VisionMode);
      }
      if (TaskId != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TaskId);
      }
      if (Flag != false) {
        output.WriteRawTag(24);
        output.WriteBool(Flag);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisionMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VisionMode);
      }
      if (TaskId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TaskId);
      }
      if (Flag != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalizeReq other) {
      if (other == null) {
        return;
      }
      if (other.VisionMode != 0) {
        VisionMode = other.VisionMode;
      }
      if (other.TaskId != 0) {
        TaskId = other.TaskId;
      }
      if (other.Flag != false) {
        Flag = other.Flag;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VisionMode = input.ReadSInt32();
            break;
          }
          case 16: {
            TaskId = input.ReadSInt32();
            break;
          }
          case 24: {
            Flag = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class LocalizeRep : pb::IMessage<LocalizeRep> {
    private static readonly pb::MessageParser<LocalizeRep> _parser = new pb::MessageParser<LocalizeRep>(() => new LocalizeRep());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LocalizeRep> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizeRep() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizeRep(LocalizeRep other) : this() {
      visionStatus_ = other.visionStatus_;
      offsetMethod_ = other.offsetMethod_;
      Pose2D = other.pose2D_ != null ? other.Pose2D.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LocalizeRep Clone() {
      return new LocalizeRep(this);
    }

    /// <summary>Field number for the "vision_status" field.</summary>
    public const int VisionStatusFieldNumber = 1;
    private int visionStatus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int VisionStatus {
      get { return visionStatus_; }
      set {
        visionStatus_ = value;
      }
    }

    /// <summary>Field number for the "offset_method" field.</summary>
    public const int OffsetMethodFieldNumber = 2;
    private string offsetMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OffsetMethod {
      get { return offsetMethod_; }
      set {
        offsetMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pose2d" field.</summary>
    public const int Pose2DFieldNumber = 3;
    private global::Pose2D pose2D_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose2D Pose2D {
      get { return pose2D_; }
      set {
        pose2D_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LocalizeRep);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LocalizeRep other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (VisionStatus != other.VisionStatus) return false;
      if (OffsetMethod != other.OffsetMethod) return false;
      if (!object.Equals(Pose2D, other.Pose2D)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (VisionStatus != 0) hash ^= VisionStatus.GetHashCode();
      if (OffsetMethod.Length != 0) hash ^= OffsetMethod.GetHashCode();
      if (pose2D_ != null) hash ^= Pose2D.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (VisionStatus != 0) {
        output.WriteRawTag(8);
        output.WriteSInt32(VisionStatus);
      }
      if (OffsetMethod.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OffsetMethod);
      }
      if (pose2D_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Pose2D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (VisionStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(VisionStatus);
      }
      if (OffsetMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OffsetMethod);
      }
      if (pose2D_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pose2D);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LocalizeRep other) {
      if (other == null) {
        return;
      }
      if (other.VisionStatus != 0) {
        VisionStatus = other.VisionStatus;
      }
      if (other.OffsetMethod.Length != 0) {
        OffsetMethod = other.OffsetMethod;
      }
      if (other.pose2D_ != null) {
        if (pose2D_ == null) {
          pose2D_ = new global::Pose2D();
        }
        Pose2D.MergeFrom(other.Pose2D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            VisionStatus = input.ReadSInt32();
            break;
          }
          case 18: {
            OffsetMethod = input.ReadString();
            break;
          }
          case 26: {
            if (pose2D_ == null) {
              pose2D_ = new global::Pose2D();
            }
            input.ReadMessage(pose2D_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CalibReq : pb::IMessage<CalibReq> {
    private static readonly pb::MessageParser<CalibReq> _parser = new pb::MessageParser<CalibReq>(() => new CalibReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CalibReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibReq(CalibReq other) : this() {
      offsetMethod_ = other.offsetMethod_;
      Position = other.position_ != null ? other.Position.Clone() : null;
      terminate_ = other.terminate_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CalibReq Clone() {
      return new CalibReq(this);
    }

    /// <summary>Field number for the "offset_method" field.</summary>
    public const int OffsetMethodFieldNumber = 1;
    private string offsetMethod_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OffsetMethod {
      get { return offsetMethod_; }
      set {
        offsetMethod_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Position3D position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Position3D Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "terminate" field.</summary>
    public const int TerminateFieldNumber = 3;
    private bool terminate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Terminate {
      get { return terminate_; }
      set {
        terminate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CalibReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CalibReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetMethod != other.OffsetMethod) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (Terminate != other.Terminate) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetMethod.Length != 0) hash ^= OffsetMethod.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (Terminate != false) hash ^= Terminate.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetMethod.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(OffsetMethod);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (Terminate != false) {
        output.WriteRawTag(24);
        output.WriteBool(Terminate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetMethod.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OffsetMethod);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (Terminate != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CalibReq other) {
      if (other == null) {
        return;
      }
      if (other.OffsetMethod.Length != 0) {
        OffsetMethod = other.OffsetMethod;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::Position3D();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.Terminate != false) {
        Terminate = other.Terminate;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            OffsetMethod = input.ReadString();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Position3D();
            }
            input.ReadMessage(position_);
            break;
          }
          case 24: {
            Terminate = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConfigReq : pb::IMessage<ConfigReq> {
    private static readonly pb::MessageParser<ConfigReq> _parser = new pb::MessageParser<ConfigReq>(() => new ConfigReq());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConfigReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::App2D.Vision2DReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigReq(ConfigReq other) : this() {
      RobotPose = other.robotPose_ != null ? other.RobotPose.Clone() : null;
      templateNo_ = other.templateNo_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConfigReq Clone() {
      return new ConfigReq(this);
    }

    /// <summary>Field number for the "robot_pose" field.</summary>
    public const int RobotPoseFieldNumber = 1;
    private global::Pose3D robotPose_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Pose3D RobotPose {
      get { return robotPose_; }
      set {
        robotPose_ = value;
      }
    }

    /// <summary>Field number for the "template_no" field.</summary>
    public const int TemplateNoFieldNumber = 2;
    private int templateNo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TemplateNo {
      get { return templateNo_; }
      set {
        templateNo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConfigReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConfigReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(RobotPose, other.RobotPose)) return false;
      if (TemplateNo != other.TemplateNo) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (robotPose_ != null) hash ^= RobotPose.GetHashCode();
      if (TemplateNo != 0) hash ^= TemplateNo.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (robotPose_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(RobotPose);
      }
      if (TemplateNo != 0) {
        output.WriteRawTag(16);
        output.WriteSInt32(TemplateNo);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (robotPose_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RobotPose);
      }
      if (TemplateNo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeSInt32Size(TemplateNo);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConfigReq other) {
      if (other == null) {
        return;
      }
      if (other.robotPose_ != null) {
        if (robotPose_ == null) {
          robotPose_ = new global::Pose3D();
        }
        RobotPose.MergeFrom(other.RobotPose);
      }
      if (other.TemplateNo != 0) {
        TemplateNo = other.TemplateNo;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (robotPose_ == null) {
              robotPose_ = new global::Pose3D();
            }
            input.ReadMessage(robotPose_);
            break;
          }
          case 16: {
            TemplateNo = input.ReadSInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
