//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Aqrose.Aidi {

public class AidiLocation : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AidiLocation(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AidiLocation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AidiLocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csharpaidiclientPINVOKE.delete_AidiLocation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AidiLocation(string check_code) : this(csharpaidiclientPINVOKE.new_AidiLocation__SWIG_0(check_code), true) {
    if (csharpaidiclientPINVOKE.SWIGPendingException.Pending) throw csharpaidiclientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiLocation() : this(csharpaidiclientPINVOKE.new_AidiLocation__SWIG_1(), true) {
  }

  public void set_test_data(AidiImage test_source_image) {
    csharpaidiclientPINVOKE.AidiLocation_set_test_data(swigCPtr, AidiImage.getCPtr(test_source_image));
    if (csharpaidiclientPINVOKE.SWIGPendingException.Pending) throw csharpaidiclientPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool set_param(LocationClientParamWrapper param) {
    bool ret = csharpaidiclientPINVOKE.AidiLocation_set_param(swigCPtr, LocationClientParamWrapper.getCPtr(param));
    if (csharpaidiclientPINVOKE.SWIGPendingException.Pending) throw csharpaidiclientPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void set_score_threshold(float thresh) {
    csharpaidiclientPINVOKE.AidiLocation_set_score_threshold(swigCPtr, thresh);
  }

  public void set_nms_threshold(float thresh) {
    csharpaidiclientPINVOKE.AidiLocation_set_nms_threshold(swigCPtr, thresh);
  }

  public void set_test_batches(int n_batches) {
    csharpaidiclientPINVOKE.AidiLocation_set_test_batches(swigCPtr, n_batches);
  }

  public void initialize_test_model() {
    csharpaidiclientPINVOKE.AidiLocation_initialize_test_model(swigCPtr);
  }

  public void start_test() {
    csharpaidiclientPINVOKE.AidiLocation_start_test(swigCPtr);
  }

  public FloatVector get_test_rect() {
    FloatVector ret = new FloatVector(csharpaidiclientPINVOKE.AidiLocation_get_test_rect(swigCPtr), true);
    return ret;
  }

}

}
