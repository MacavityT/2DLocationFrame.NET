//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.12
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace Aqrose.Aidi {

public class BatchAidiImage : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BatchAidiImage(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BatchAidiImage obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BatchAidiImage() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          csharpaidiclientPINVOKE.delete_BatchAidiImage(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BatchAidiImage() : this(csharpaidiclientPINVOKE.new_BatchAidiImage(), true) {
  }

  public void add_image(AidiImage image) {
    csharpaidiclientPINVOKE.BatchAidiImage_add_image(swigCPtr, AidiImage.getCPtr(image));
    if (csharpaidiclientPINVOKE.SWIGPendingException.Pending) throw csharpaidiclientPINVOKE.SWIGPendingException.Retrieve();
  }

  public void clear_images() {
    csharpaidiclientPINVOKE.BatchAidiImage_clear_images(swigCPtr);
  }

  public void show_all_images(int wait_time) {
    csharpaidiclientPINVOKE.BatchAidiImage_show_all_images(swigCPtr, wait_time);
  }

  public int get_images_size() {
    int ret = csharpaidiclientPINVOKE.BatchAidiImage_get_images_size(swigCPtr);
    return ret;
  }

  public void get_all_images(SWIGTYPE_p_std__vectorT_cv__Mat_t all_images) {
    csharpaidiclientPINVOKE.BatchAidiImage_get_all_images(swigCPtr, SWIGTYPE_p_std__vectorT_cv__Mat_t.getCPtr(all_images));
    if (csharpaidiclientPINVOKE.SWIGPendingException.Pending) throw csharpaidiclientPINVOKE.SWIGPendingException.Retrieve();
  }

  public AidiImage at(int index) {
    AidiImage ret = new AidiImage(csharpaidiclientPINVOKE.BatchAidiImage_at(swigCPtr, index), true);
    return ret;
  }

}

}
